{
  "influxdb": {
    "enabled": true,
    "host": "http://INFLUX_URL:8086",
    "token": "XXXXXXXXXXXXXXXXXXXXXXXXXXXX_AUTH_TOKEN_XXXXXXXXXXXXXXXXXXXXXXXXXXX",
    "org": "ORG_NAME"
  },
  "timescaledb": {
    "enabled": false,
    "connectionUrl": "postgresql://user:pass@host.com:5432",
    "databaseName": "ranger_metrics",
    "description": "TimescaleDB is an open-source time-series database built on Postgres. The extension will connect to the maintenance database (postgres) first and create the database it will control with desired name, then shift connections to the newly created database to create the schema and conduct write operations."
  },
  "arma3": {
    "refreshRateMs": 1000,
    "debug": false
  },
  "recordingSettings": {
    "serverPolls": [
      {
        "name": "serverPerformance",
        "enabled": true,
        "serverOnly": false,
        "intervalMs": 1000,
        "bucket": "server_performance",
        "measurement": "fps",
        "description": "SERVER/HC POLL. Tracks average and minimum FPS. Polled on server (and HC) at specified interval."
      },
      {
        "name": "runningScripts",
        "enabled": true,
        "serverOnly": false,
        "intervalMs": 1000,
        "bucket": "server_performance",
        "measurement": "running_scripts",
        "description": "SERVER/HC POLL. Tracks the number of scripts running on the server (and HC). Polled on specified interval."
      },
      {
        "name": "entityCount",
        "enabled": true,
        "serverOnly": false,
        "intervalMs": 20000,
        "bucket": "server_performance",
        "measurement": "n/a",
        "description": "SERVER/HC POLL. Tracks the number of entities on the server. Polled on server (and HC) at specified interval as well as on EntityCreated/EntityRespawned/EntityKilled events. Measurement is static, [entities_local, entities_remote, entities_global]."
      },
      {
        "name": "playerPerformance",
        "enabled": true,
        "serverOnly": true,
        "intervalMs": 1000,
        "bucket": "player_performance",
        "measurement": "network",
        "description": "SERVER POLL. User network performance. Tracks average ping, average bandwidth, and desync. Polled by the server at specified interval. Not tracked from headless client."
      },
      {
        "name": "serverTime",
        "enabled": true,
        "serverOnly": true,
        "intervalMs": 10000,
        "bucket": "mission_data",
        "measurement": "server_time",
        "description": "SERVER POLL. Tracks the server time. Always server-only. Runs at specified interval."
      },
      {
        "name": "weather",
        "enabled": true,
        "serverOnly": true,
        "intervalMs": 120000,
        "bucket": "mission_data",
        "measurement": "weather",
        "description": "SERVER POLL. Tracks the weather on the server. Always server-only. Runs at specified interval."
      },
      {
        "name": "viewDistance",
        "enabled": true,
        "serverOnly": true,
        "intervalMs": 120000,
        "bucket": "mission_data",
        "measurement": "view_distance",
        "description": "SERVER POSTINIT, MPEnded. Tracks the view distance on the server. Always server-only. Runs at specified interval."
      },
      {
        "name": "runningMission",
        "enabled": true,
        "serverOnly": true,
        "intervalMs": 0,
        "bucket": "mission_data",
        "measurement": "running_mission",
        "description": "SERVER POSTINIT, MPEnded. Tracks the name of the mission running on the server. Always server-only. Runs at the start (and tries at end) of the mission."
      }
    ],
    "CBAEventHandlers": [
      {
        "name": "milsimServerEfficiency",
        "enabled": true,
        "description": "EVENTHANDLER. Tracks the efficiency of the server."
      }
    ]
  }
}